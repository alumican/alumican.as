package net.alumican.as3.framework.progression4.pages
{
	import flash.display.DisplayObject;
	import flash.display.Sprite;
	import flash.events.Event;
	import flash.utils.getTimer;
	import jp.progression.casts.CastSprite;
	import jp.progression.commands.Break;
	import jp.progression.commands.Command;
	import jp.progression.commands.CommandList;
	import jp.progression.commands.Func;
	import jp.progression.commands.lists.SerialList;
	import jp.progression.commands.Prop;
	import jp.progression.commands.Return;
	import net.alumican.as3.framework.progression4.events.ActionEvent;
	import net.alumican.as3.framework.progression4.events.DisplayEvent;
	
	/**
	 * 汎用ビューオブジェクト
	 * 
	 * @author alumican.net<Yukiya Okuda>
	 */
	public class GeneralViewSprite extends CastSprite
	{
		//----------------------------------------
		//CLASS CONSTANTS
		
		
		
		
		
		//----------------------------------------
		//VARIABLES
		
		/**
		 * 現在表示中であればtrue
		 */
		public function get isShowing():Boolean { return _isShowing; }
		protected var _isShowing:Boolean;
		
		/**
		 * 表示アニメーション
		 * @param	useTween
		 * @param	notifyComplete
		 */
		public function get showProcess():Function { return __showProcess || _showProcess; }
		public function set showProcess(value:Function):void { __showProcess = value; }
		private var __showProcess:Function;
		
		/**
		 * 非表示アニメーション
		 * @param	useTween
		 * @param	notifyComplete
		 */
		public function get hideProcess():Function { return __hideProcess || _hideProcess; }
		public function set hideProcess(value:Function):void { __hideProcess = value; }
		private var __hideProcess:Function;
		
		/**
		 * トランジション実行中であればtrue
		 */
		public function get isShowProcessing():Boolean { return _isShowProcessing; }
		public function get isHideProcessing():Boolean { return _isHideProcessing; }
		private var _isShowProcessing:Boolean;
		private var _isHideProcessing:Boolean;
		
		/**
		 * thisポインタ
		 */
		public function get instance():DisplayObject { return _instance; }
		private var _instance:DisplayObject;
		
		
		
		
		
		//----------------------------------------
		//METHODS AS PUBLIC
		
		/**
		 * コンストラクタ
		 */
		public function GeneralViewSprite(id:String = null, initObject:Object = null):void
		{
			this.id = id;
			_instance = this;
			_isShowing = true;
			_isShowProcessing = false;
			_isHideProcessing = false;
			super(initObject);
		}
		
		/**
		 * 表示コマンド
		 */
		public function showCommand(useTween:Boolean = true, args:Array = null):CommandList
		{
			return new SerialList(null,
				
				//前処理
				function():void
				{
					if (_isShowing)
					{
						CommandList(this.parent).insertCommand( new Break() );
						return;
					}
					else
					{
						_isShowing = true;
						_isShowProcessing = true;
						dispatchEvent( new DisplayEvent(DisplayEvent.SHOW_START, false, false) );
					}
				},
				
				//トランジション
				_showCommand(useTween, (args != null) ? args : []),
				
				//後処理
				function():void
				{
					if (_isShowing)
					{
						_isShowProcessing = false;
						dispatchEvent( new DisplayEvent(DisplayEvent.SHOW_COMPLETE, false, false) );
					}
				}
			);
		}
		
		/**
		 * 非表示コマンド
		 */
		public function hideCommand(useTween:Boolean = true, args:Array = null):CommandList
		{
			return new SerialList(null,
				
				//前処理
				function():void
				{
					if (!_isShowing)
					{
						CommandList(this.parent).insertCommand( new Break() );
						return;
					}
					else
					{
						_isShowing = false;
						_isHideProcessing = true;
						dispatchEvent( new DisplayEvent(DisplayEvent.HIDE_START, false, false) );
					}
				},
				
				//トランジション
				_hideCommand(useTween, (args != null) ? args : []),
				
				//後処理
				function():void
				{
					if (!_isShowing)
					{
						_isHideProcessing = false;
						dispatchEvent( new DisplayEvent(DisplayEvent.HIDE_COMPLETE, false, false) );
					}
				}
			);
		}
		
		/**
		 * カスタムアクションコマンド
		 */
		public function doActionCommand(action:String, args:Array = null):CommandList
		{
			return new SerialList(null,
				
				//前処理
				function():void
				{
					dispatchEvent( new ActionEvent(ActionEvent.START, false, false) );
				},
				
				//カスタムアクション
				_doActionCommand(action, (args != null) ? args : []),
				
				//後処理
				function():void
				{
					dispatchEvent( new ActionEvent(ActionEvent.COMPLETE, false, false) );
				}
			);
		}
		
		
		
		
		
		/**
		 * 表示
		 */
		public function show(useTween:Boolean = true, notifyComplete:Function = null, args:Array = null):void
		{
			if (_isShowing) return;
			_isShowing = true;
			_isShowProcessing = true;
			dispatchEvent(new DisplayEvent(DisplayEvent.SHOW_START, false, false));
			_showProcess(
				useTween,
				(args != null) ? args : [],
				function():void
				{
					if (_isShowing)
					{
						_isShowProcessing = false;
						dispatchEvent(new DisplayEvent(DisplayEvent.SHOW_COMPLETE, false, false));
						if (notifyComplete != null) notifyComplete();
					}
				}
			);
		}
		
		/**
		 * 非表示
		 */
		public function hide(useTween:Boolean = true, notifyComplete:Function = null, args:Array = null):void
		{
			if (!_isShowing) return;
			_isShowing = false;
			_isHideProcessing = true;
			dispatchEvent(new DisplayEvent(DisplayEvent.HIDE_START, false, false));
			_hideProcess(
				useTween,
				(args != null) ? args : [],
				function():void
				{
					if (!_isShowing)
					{
						_isHideProcessing = false;
						dispatchEvent(new DisplayEvent(DisplayEvent.HIDE_COMPLETE, false, false));
						if (notifyComplete != null) notifyComplete();
					}
				}
			);
		}
		
		/**
		 * カスタムアクション
		 */
		public function doAction(action:String, args:Array = null):void
		{
			dispatchEvent(new ActionEvent(ActionEvent.START, false, false));
			_doActionProcess(action, args, function():void
			{
				dispatchEvent(new ActionEvent(ActionEvent.COMPLETE, false, false));
			} );
		}
		
		
		
		
		
		//----------------------------------------
		//METHODS AS OVERRIDED
		
		/**
		 * 表示コマンド
		 */
		protected function _showCommand(useTween:Boolean, args:Array):CommandList
		{
			var event:String = "SHOW_COMMAND_COMPLETE_" + String( getTimer() );
			function complete():void
			{
				dispatchEvent( new Event(event) );
			}
			return new SerialList(null, new Func(showProcess, [useTween, complete], this, event));
		}
		
		/**
		 * 非表示コマンド
		 */
		protected function _hideCommand(useTween:Boolean, args:Array):CommandList
		{
			var event:String = "HIDE_COMMAND_COMPLETE_" + String( getTimer() );
			function complete():void
			{
				dispatchEvent( new Event(event) );
			}
			return new SerialList(null, new Func(hideProcess, [useTween, complete], this, event));
		}
		
		/**
		 * カスタムアクションコマンド
		 */
		protected function _doActionCommand(action:String, args:Array):CommandList
		{
			var func:Function = this[action];
			if (func == null)
			{
				throw new ArgumentError("GeneralViewSprite#_doActionCommand : 関数 " + action + "はインスタンスID " + id + " 内に定義されていないため実行できませんでした");
			}
			return func.apply(null, (args.length > 0) ? args : null);
		}
		
		
		
		
		
		/**
		 * 表示アニメーション
		 */
		protected function _showProcess(useTween:Boolean, args:Array, notifyComplete:Function):void
		{
			visible = true;
			notifyComplete();
		}
		
		/**
		 * 非表示アニメーション
		 */
		protected function _hideProcess(useTween:Boolean, args:Array, notifyComplete:Function):void
		{
			visible = false;
			notifyComplete();
		}
		
		/**
		 * カスタムアクションの実行
		 */
		protected function _doActionProcess(action:String, args:Array, notifyComplete:Function):void
		{
			var func:Function = this[action];
			if (func == null)
			{
				throw new ArgumentError("GeneralViewSprite#_doActionProcess : 関数 " + action + "はインスタンスID " + id + " 内に定義されいないため実行できませんでした");
			}
			var args:Array = args ? [notifyComplete].concat(args) : [notifyComplete];
			func.apply(this, args);
		}
		
		
		
		
		
		//----------------------------------------
		//METHODS AS PRIVATE
	}
}
